pluginManagement {
	includeBuild 'gradle/plugins/nokeebuild-plugins'
}

rootProject.name = 'nokee-commons'

include 'commons-backports'
include 'commons-hamcrest'
include 'commons-provider'
include 'commons-names'

includeBuild 'commons-build-script'

dependencyResolutionManagement {
	repositoriesMode = RepositoriesMode.PREFER_SETTINGS
	repositories {
		mavenCentral()
	}
}

gradle.allprojects {
	group = 'dev.nokee.commons'

	pluginManager.withPlugin('java-base') {
		java {
			sourceCompatibility = JavaVersion.VERSION_1_8
			targetCompatibility = JavaVersion.VERSION_1_8
		}

		ext {
			gradleApi = { version -> "dev.gradleplugins:gradle-api:$version" }
		}
	}
	pluginManager.withPlugin('java-library') {
		java {
			withSourcesJar()
			withJavadocJar()
		}

		tasks.named('javadoc', Javadoc) {
			options {
				showFromPublic()
				links += 'https://docs.gradle.org/current/javadoc/'
				classpath += configurations.detachedConfiguration(dependencies.create('dev.gradleplugins:gradle-api:8.11'))
				// TODO: Maybe infer windowsTitle based on project name
			}
		}
	}
	pluginManager.withPlugin('java-library') {
		pluginManager.withPlugin('jvm-test-suite') {
			testing {
				suites {
					test {
						useJUnitJupiter('5.11.4')

						targets.configureEach {
							testTask.configure {
								systemProperty 'junit.jupiter.tempdir.cleanup.mode.default', 'ON_SUCCESS'
							}
						}
					}
				}
			}
		}
	}
	pluginManager.withPlugin('maven-publish') {
		publishing {
			repositories {
				maven {
					name = 'ossrhRelease'
					url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
					credentials(PasswordCredentials)
				}
			}
			publications {
				pluginManager.withPlugin('java-library') {
					java(MavenPublication) {
						from(components.java)
						pom {
							name = "Nokee Commons Names";
							description = project.provider { project.description }
							url = 'https://nokee.dev'
							licenses {
								license {
									name = 'The Apache License, Version 2.0'
									url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
								}
							}
							developers {
								developer {
									id = 'lacasseio'
									name = 'Daniel Lacasse'
									email = 'daniel@nokee.dev'
								}
							}
							scm {
								connection = 'scm:git:git://github.com/nokeedev/nokee-commons.git'
								developerConnection = 'scm:git:ssh://github.com:nokeedev/nokee-commons.git'
								url = 'https://github.com/nokeedev/nokee-commons/tree/master'
							}
						}
					}
				}
			}
		}

		apply plugin: 'signing'
		signing {
			sign(publishing.publications.java)
			if (!project.hasProperty('signing.secretKeyRingFile')) {
				def signingKeyId = findProperty("signing.keyId").toString()
				def signingKey = findProperty("signing.key").toString()
				def signingPassword = findProperty("signing.password").toString()
				useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
			}
		}
	}
}
